{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Evans\\\\Desktop\\\\dashboard-fimat\\\\client\\\\src\\\\components\\\\Paginate.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactPaginate from 'react-paginate';\n\n// Example items, to simulate fetching from another resources.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nfunction Items(_ref) {\n  let {\n    currentItems\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentItems && currentItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Item #\", item]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 11\n    }, this))\n  }, void 0, false);\n}\n_c = Items;\nexport default function PaginatedItems(_ref2) {\n  _s();\n  let {\n    itemsPerPage\n  } = _ref2;\n  // Here we use item offsets; we could also use page offsets\n  // following the API or data you're working with.\n  const [itemOffset, setItemOffset] = useState(0);\n\n  // Simulate fetching items from another resources.\n  // (This could be items from props; or items loaded in a local state\n  // from an API endpoint with useEffect and useState)\n  const endOffset = itemOffset + itemsPerPage;\n  console.log(`Loading items from ${itemOffset} to ${endOffset}`);\n  const currentItems = items.slice(itemOffset, endOffset);\n  const pageCount = Math.ceil(items.length / itemsPerPage);\n\n  // Invoke when user click to request another page.\n  const handlePageClick = event => {\n    const newOffset = event.selected * itemsPerPage % items.length;\n    console.log(`User requested page number ${event.selected}, which is offset ${newOffset}`);\n    setItemOffset(newOffset);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Items, {\n      currentItems: currentItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      breakLabel: \"...\",\n      nextLabel: \"next >\",\n      onPageChange: handlePageClick,\n      pageRangeDisplayed: 5,\n      pageCount: pageCount,\n      previousLabel: \"< previous\",\n      renderOnZeroPageCount: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(PaginatedItems, \"T5lRYnT7FeIRYhFW34vLrQET4eA=\");\n_c2 = PaginatedItems;\nvar _c, _c2;\n$RefreshReg$(_c, \"Items\");\n$RefreshReg$(_c2, \"PaginatedItems\");","map":{"version":3,"names":["React","useEffect","useState","ReactDOM","ReactPaginate","jsxDEV","_jsxDEV","Fragment","_Fragment","items","Items","_ref","currentItems","children","map","item","fileName","_jsxFileName","lineNumber","columnNumber","_c","PaginatedItems","_ref2","_s","itemsPerPage","itemOffset","setItemOffset","endOffset","console","log","slice","pageCount","Math","ceil","length","handlePageClick","event","newOffset","selected","breakLabel","nextLabel","onPageChange","pageRangeDisplayed","previousLabel","renderOnZeroPageCount","_c2","$RefreshReg$"],"sources":["C:/Users/Evans/Desktop/dashboard-fimat/client/src/components/Paginate.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ReactPaginate from 'react-paginate';\r\n\r\n// Example items, to simulate fetching from another resources.\r\nconst items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\r\n\r\nfunction Items({ currentItems }) {\r\n  return (\r\n    <>\r\n      {currentItems &&\r\n        currentItems.map((item) => (\r\n          <div>\r\n            <h3>Item #{item}</h3>\r\n          </div>\r\n        ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default function PaginatedItems({ itemsPerPage }) {\r\n  // Here we use item offsets; we could also use page offsets\r\n  // following the API or data you're working with.\r\n  const [itemOffset, setItemOffset] = useState(0);\r\n\r\n  // Simulate fetching items from another resources.\r\n  // (This could be items from props; or items loaded in a local state\r\n  // from an API endpoint with useEffect and useState)\r\n  const endOffset = itemOffset + itemsPerPage;\r\n  console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n  const currentItems = items.slice(itemOffset, endOffset);\r\n  const pageCount = Math.ceil(items.length / itemsPerPage);\r\n\r\n  // Invoke when user click to request another page.\r\n  const handlePageClick = (event) => {\r\n    const newOffset = (event.selected * itemsPerPage) % items.length;\r\n    console.log(\r\n      `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n    );\r\n    setItemOffset(newOffset);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Items currentItems={currentItems} />\r\n      <ReactPaginate\r\n        breakLabel=\"...\"\r\n        nextLabel=\"next >\"\r\n        onPageChange={handlePageClick}\r\n        pageRangeDisplayed={5}\r\n        pageCount={pageCount}\r\n        previousLabel=\"< previous\"\r\n        renderOnZeroPageCount={null}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,aAAa,MAAM,gBAAgB;;AAE1C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AAE7D,SAASC,KAAKA,CAAAC,IAAA,EAAmB;EAAA,IAAlB;IAAEC;EAAa,CAAC,GAAAD,IAAA;EAC7B,oBACEL,OAAA,CAAAE,SAAA;IAAAK,QAAA,EACGD,YAAY,IACXA,YAAY,CAACE,GAAG,CAAEC,IAAI,iBACpBT,OAAA;MAAAO,QAAA,eACEP,OAAA;QAAAO,QAAA,GAAI,QAAM,EAACE,IAAI;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAM;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAExB;EAAC,iBACH;AAEP;AAACC,EAAA,GAXQV,KAAK;AAad,eAAe,SAASW,cAAcA,CAAAC,KAAA,EAAmB;EAAAC,EAAA;EAAA,IAAlB;IAAEC;EAAa,CAAC,GAAAF,KAAA;EACrD;EACA;EACA,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;;EAE/C;EACA;EACA;EACA,MAAMyB,SAAS,GAAGF,UAAU,GAAGD,YAAY;EAC3CI,OAAO,CAACC,GAAG,CAAE,sBAAqBJ,UAAW,OAAME,SAAU,EAAC,CAAC;EAC/D,MAAMf,YAAY,GAAGH,KAAK,CAACqB,KAAK,CAACL,UAAU,EAAEE,SAAS,CAAC;EACvD,MAAMI,SAAS,GAAGC,IAAI,CAACC,IAAI,CAACxB,KAAK,CAACyB,MAAM,GAAGV,YAAY,CAAC;;EAExD;EACA,MAAMW,eAAe,GAAIC,KAAK,IAAK;IACjC,MAAMC,SAAS,GAAID,KAAK,CAACE,QAAQ,GAAGd,YAAY,GAAIf,KAAK,CAACyB,MAAM;IAChEN,OAAO,CAACC,GAAG,CACR,8BAA6BO,KAAK,CAACE,QAAS,qBAAoBD,SAAU,EAAC,CAC7E;IACDX,aAAa,CAACW,SAAS,CAAC;EAC1B,CAAC;EAED,oBACE/B,OAAA,CAAAE,SAAA;IAAAK,QAAA,gBACEP,OAAA,CAACI,KAAK;MAACE,YAAY,EAAEA;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACrCb,OAAA,CAACF,aAAa;MACZmC,UAAU,EAAC,KAAK;MAChBC,SAAS,EAAC,QAAQ;MAClBC,YAAY,EAAEN,eAAgB;MAC9BO,kBAAkB,EAAE,CAAE;MACtBX,SAAS,EAAEA,SAAU;MACrBY,aAAa,EAAC,YAAY;MAC1BC,qBAAqB,EAAE;IAAK;MAAA5B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC5B;EAAA,gBACD;AAEP;AAACI,EAAA,CApCuBF,cAAc;AAAAwB,GAAA,GAAdxB,cAAc;AAAA,IAAAD,EAAA,EAAAyB,GAAA;AAAAC,YAAA,CAAA1B,EAAA;AAAA0B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}